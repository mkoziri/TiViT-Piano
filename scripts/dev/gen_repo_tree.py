"""Purpose:
    Produce a Markdown tree view of the repository while respecting
    ``.gitignore`` and project-specific ignore patterns.

Key Functions/Classes:
    - build_tree(): Recursively enumerate directory entries while applying the
      ignore rules.
    - load_gitignore(): Reads ``.gitignore`` patterns to augment the ignore
      set.

CLI:
    Execute ``python scripts/dev/gen_repo_tree.py``.  The script has no CLI
    options and writes ``docs/REPO_TREE.md``.
"""

from __future__ import annotations

import fnmatch
from pathlib import Path
from typing import Iterable

# Patterns for directories and files to ignore
DEFAULT_IGNORES = {
    ".git",
    ".venv",
    "__pycache__",
    ".ipynb_checkpoints",
    ".ruff_cache",
}
DEFAULT_GLOB_IGNORES = {
    "data*",
    "datasets*",
    "outputs*",
    "checkpoints*",
}
IGNORE_EXTS = {".pt", ".pth", ".mp4"}

ROOT = Path(__file__).resolve().parents[2]
DOC_PATH = ROOT / "docs" / "REPO_TREE.md"


def load_gitignore(patterns: set[str]) -> None:
    """Load additional ignore patterns from .gitignore."""
    gitignore = ROOT / ".gitignore"
    if not gitignore.exists():
        return
    for line in gitignore.read_text().splitlines():
        line = line.strip()
        if line and not line.startswith("#"):
            patterns.add(line)


def should_ignore(path: Path, ignore_patterns: Iterable[str]) -> bool:
    rel = path.relative_to(ROOT).as_posix()
    name = path.name
    if name in DEFAULT_IGNORES:
        return True
    if path.is_dir() and path.parent == ROOT:
        if any(fnmatch.fnmatch(name, pat) for pat in DEFAULT_GLOB_IGNORES):
            return True
    if path.suffix in IGNORE_EXTS:
        return True
    for pat in ignore_patterns:
        pat = pat.rstrip("/")
        if fnmatch.fnmatch(rel, pat) or rel.startswith(pat + "/"):
            return True
    return False


def build_tree(root: Path, ignore_patterns: set[str]) -> list[str]:
    lines = [root.name + "/"]

    def walk(dir_path: Path, prefix: str) -> None:
        entries = sorted(
            [p for p in dir_path.iterdir() if not should_ignore(p, ignore_patterns)],
            key=lambda p: (p.is_file(), p.name.lower()),
        )
        for i, entry in enumerate(entries):
            connector = "└─ " if i == len(entries) - 1 else "├─ "
            line = prefix + connector + entry.name
            lines.append(line)
            if entry.is_dir():
                new_prefix = prefix + ("   " if i == len(entries) - 1 else "│  ")
                walk(entry, new_prefix)

    walk(root, "")
    return lines


def main() -> None:
    patterns: set[str] = set()
    load_gitignore(patterns)
    lines = [
        "# Repository Tree",
        "",
        "Generated by `scripts/dev/gen_repo_tree.py`.",
        "",
    ]
    lines.extend(build_tree(ROOT, patterns))
    DOC_PATH.write_text("\n".join(lines) + "\n")


if __name__ == "__main__":
    main()
