"""Generate docs/FILE_INDEX.md with per-file summaries."""
from __future__ import annotations

import ast
from pathlib import Path
from typing import Any

ROOT = Path(__file__).resolve().parents[2]
DOC_PATH = ROOT / 'docs' / 'FILE_INDEX.md'


def parse_cli(tree: ast.AST) -> list[dict[str, Any]]:
    args = []
    for node in ast.walk(tree):
        if isinstance(node, ast.Call) and isinstance(node.func, ast.Attribute) and node.func.attr == 'add_argument':
            entry: dict[str, Any] = {'flags': []}
            for a in node.args:
                if isinstance(a, ast.Constant) and isinstance(a.value, str):
                    entry['flags'].append(a.value)
            for kw in node.keywords:
                if kw.arg == 'help' and isinstance(kw.value, ast.Constant):
                    entry['help'] = kw.value.value
                elif kw.arg == 'default' and isinstance(kw.value, ast.Constant):
                    entry['default'] = kw.value.value
                elif kw.arg == 'type':
                    if isinstance(kw.value, ast.Name):
                        entry['type'] = kw.value.id
                    elif isinstance(kw.value, ast.Attribute):
                        entry['type'] = kw.value.attr
                elif kw.arg == 'action' and isinstance(kw.value, ast.Constant):
                    entry['type'] = kw.value.value
            args.append(entry)
    return args


def list_defs(tree: ast.AST) -> list[str]:
    items = []
    for node in tree.body:
        if isinstance(node, ast.FunctionDef):
            items.append(f"- `{node.name}()`")
        if isinstance(node, ast.ClassDef):
            items.append(f"- class `{node.name}`")
    return items


def summarize_file(path: Path) -> str:
    text = path.read_text()
    tree = ast.parse(text)
    doc = ast.get_docstring(tree) or ''
    lines = [f"### {path.as_posix()}", f"**Purpose:** {doc.splitlines()[0] if doc else 'N/A'}", ""]
    defs = list_defs(tree)
    if defs:
        lines.append("**Key Functions/Classes**")
        lines.extend(defs)
        lines.append("")
    cli = parse_cli(tree)
    if cli:
        lines.append("**CLI**")
        lines.append("| Flags | Type | Default | Help |")
        lines.append("|---|---|---|---|")
        for c in cli:
            flags = ", ".join(c.get('flags', []))
            lines.append(f"| `{flags}` | {c.get('type','')} | {c.get('default','')} | {c.get('help','')} |")
        lines.append("")
    return "\n".join(lines)


def main() -> None:
    files = []
    files.extend(sorted((ROOT / 'src').rglob('*.py')))
    files.extend(sorted((ROOT / 'scripts').rglob('*.py')))
    yaml_files = sorted((ROOT / 'configs').rglob('*.yaml'))
    lines = ["# File Index", "", "Generated by `scripts/dev/gen_file_index.py`.", ""]
    for path in files:
        if 'dev' in path.parts:
            continue
        lines.append(summarize_file(path.relative_to(ROOT)))
    for yml in yaml_files:
        rel = yml.relative_to(ROOT)
        text = yml.read_text().splitlines()
        keys = [line.split(':')[0] for line in text if ':' in line and not line.startswith(' ')]
        lines.append(f"### {rel.as_posix()}\nTop-level keys: {', '.join(keys)}\n")
    DOC_PATH.write_text("\n".join(lines))


if __name__ == '__main__':
    main()
