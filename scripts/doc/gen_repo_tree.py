"""Generate docs/REPO_TREE.md showing repository structure."""
from __future__ import annotations

from pathlib import Path

IGNORE_DIRS = {
    '.git', '.venv', '__pycache__', '.ipynb_checkpoints',
    '.env', 'data', 'datasets', 'outputs', 'checkpoints'
}
IGNORE_EXTS = {'.pt', '.pth', '.mp4'}

ROOT = Path(__file__).resolve().parents[2]
DOC_PATH = ROOT / 'docs' / 'REPO_TREE.md'


def build_tree(root: Path) -> list[str]:
    lines = [root.name + '/']

    def walk(dir_path: Path, prefix: str):
        entries = sorted([p for p in dir_path.iterdir() if not should_ignore(p)])
        for i, entry in enumerate(entries):
            connector = '└─ ' if i == len(entries) - 1 else '├─ '
            line = prefix + connector + entry.name
            lines.append(line)
            if entry.is_dir():
                new_prefix = prefix + ('   ' if i == len(entries) - 1 else '│  ')
                walk(entry, new_prefix)

    walk(root, '')
    return lines


def should_ignore(path: Path) -> bool:
    if path.name in IGNORE_DIRS:
        return True
    if any(seg.startswith(tuple(IGNORE_DIRS)) for seg in path.parts):
        return True
    if path.suffix in IGNORE_EXTS:
        return True
    return False


def main() -> None:
    lines = ["# Repository Tree", "", "Generated by `scripts/dev/gen_repo_tree.py`.", ""]
    lines.extend(build_tree(ROOT))
    DOC_PATH.write_text("\n".join(lines) + "\n")


if __name__ == '__main__':
    main()
